<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Thoughts and ideas.]]></description><link>http://notes.damycra.com/</link><generator>Ghost 0.5</generator><lastBuildDate>Thu, 23 Oct 2014 18:39:58 GMT</lastBuildDate><atom:link href="http://notes.damycra.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[How to host your Ghost Blog behind Nginx using Docker containers, in 5 minutes]]></title><description><![CDATA[<p><em>(OK, maybe 10 minutes if you need to set up a DigitalOcean account first)</em></p>

<p>Those nice folks at <a href='https://www.digitalocean.com/' >Digital Ocean</a> (<a href='https://www.digitalocean.com/?refcode=7f4a8472db57' >referral link</a>) can provide SSD backed virtual servers quickly and at low cost ($5 per month for the basic option), AND they can also provision them for you with apps already setup (including Ghost or Docker), all in around 60 seconds. <a href='https://www.docker.com/whatisdocker/' >Docker</a> has been the cool new thing in devops/sysadmin circles for at least a year and I have chosen the beautiful <a href='https://ghost.org/' >Ghost blogging platform</a> to author my ramblings so I figured that this trinity should be brought together.</p>

<p>First, create your 'droplet' by:</p>

<ol>
<li>Giving it a name  </li>
<li>Choosing the size ($5)  </li>
<li>Selecting the region you want  </li>
<li>Under Select Image, choose the Applications tab and then Docker  </li>
<li>Choose your SSH key if you want to use one  </li>
<li>Hit Create Droplet</li>
</ol>

<p><img src='http://notes.damycra.com/content/images/2014/Oct/do.png'  alt="" /></p>

<p>Second, wait 60 seconds for provisioning then SSH into your server (from a terminal on your Mac, <code>ssh root@&lt;your-droplet-public-ip-address&gt;</code>).</p>

<p>Third, run the below commands in order... </p>

<p><strong>N.B.</strong>
Enter your own URL at line 18 (or you could enter the IP address of the server instead).</p>

<script src='https://gist.github.com/damycra/b63b682003c03d58d98d.js' ></script>

<noscript>  
<p>See script at: [gist](https://gist.github.com/damycra/b63b682003c03d58d98d)</p>  
</noscript>

<p>... And you have a working Ghost blog on the interwebs. Visit <code>http://&lt;your-droplet-public-ip-address&gt;/ghost/</code> to configure an admin user. </p>

<h3 id="whatsgoingon">What's going on?</h3>

<p>Lines 1–3 create directories we use later <br />
Lines 5–39 provides a minimal Ghost <a href='http://support.ghost.org/config/' ><code>config.js</code></a> to run the blog in production mode and puts it in <code>/var/ghost</code> <br />
Lines 41–61 sets up a basic Nginx server configuration <br />
Lines 63 &amp; 64 <a href='http://docs.docker.com/reference/commandline/cli/' #pull">pull</a> Docker images for <a href='https://registry.hub.docker.com/u/dockerfile/ghost/' >Ghost</a> and <a href='https://registry.hub.docker.com/u/dockerfile/nginx/' >Nginx</a> from from the Docker Hub <br />
Line 65 <a href='https://docs.docker.com/reference/run/' >starts</a> a Docker <em>container</em> from the Ghost image, names it <em>ghost</em> and maps <code>/var/ghost</code> on our Droplet with <code>/ghost-override</code> in the <em>container</em> <br />
Line 66 starts a Docker container from the Nginx image, calls it <em>nginx</em> and maps the other directories we created into the container. It also <a href='https://docs.docker.com/userguide/dockerlinks/' >links</a> the <em>nginx</em> container to the <em>ghost</em> container — this means that nginx gets environment variables with details about the <em>ghost</em> container, and also gets an entry in <code>/etc/hosts</code>. This latter fact allows us to specify the name <em>ghost</em> in line 57.</p>

<h3 id="sowhat">So what?</h3>

<p>We could just as easily have installed Nginx on the Droplet in the first place (and installing Ghost would not have been too difficult, either, assuming we did not want to use the Ghost application image from Digital Ocean) so why do this? </p>

<p>Well, partly because we can but mainly for the incredible flexibility we get. Setting up a new Ghost blog for Aunt Mabel suddenly becomes much easier, for instance, as does trying out the next version with minimal concerns about affecting the current setup on the host server (we do need to be careful to map a different directory into the new container, <code>/var/ghost_tryout</code> perhaps). That applies to Ghost or any other software that we might be interested in spinning up and trying out without leaving any cruft behind when we're finished. And moving to another VPS provider is that bit easier, too.</p>

<h3 id="appendix">Appendix</h3>

<p><strong>Server restarts</strong> Turns out that if the droplet reboots, Docker may not restart your containers. It's easy enough to <code>docker start ghost nginx</code> but better to do it automatically. We can tell Docker <a href='http://docs.docker.com/articles/host_integration/' >not to restart containers and get upstart to manage them</a> instead:</p>

<script src='https://gist.github.com/damycra/8b558a5cc5140389182f.js' ></script>]]></description><link>http://notes.damycra.com/how-to-host-ghost-blog-running-with-nginx-on-digitalocean-in-5-minutes/</link><guid isPermaLink="false">61e30119-812f-4fd2-b5ee-da537c97c410</guid><category><![CDATA[docker ]]></category><dc:creator><![CDATA[Steven Davidson]]></dc:creator><pubDate>Thu, 23 Oct 2014 14:50:15 GMT</pubDate></item></channel></rss>
